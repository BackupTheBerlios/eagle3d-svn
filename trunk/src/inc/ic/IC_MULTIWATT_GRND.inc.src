Multiwatt
//Multiwatt15 H & V package.
//Author: Christian Hostelet c.hostelet@wanadoo.fr
//Reference: ST-Microelectronics web site (www.st.com)
//
//Depends on "discrete-ttols.inc" include file
//
//The two macros defined are:
//
//Multiwatt15V (value)  - for vertical MW15 package
//Multiwatt15H (value)  - for horizontal MW15 package
####################################################################################################
MULTIWATT-15:0:1:0:0:0:0:0:0:0:0:0:0:0:0:0:0:-5.08:0:0:0:0:0:0:0:0:0:0:0:0:0:IC_MULTIWATT15V(:Multiwatt 15 vertikal:Multiwatt 15 vertical
####################################################################################################
IC_MULTIWATT_GRND
(value,H_V)
####################################################################################################
IC_MULTIWATT15V(value)
(value,1)
IC_MULTIWATT15H(value) 
(value,0)
####################################################################################################
####################################################################################################
    // *  Discrete Utilities
    // *
    // *  Author: Christian Hostelet c.hostelet@wanadoo.fr
    // *
    // *  Defines some macros used in other include files
    // *
    // *  Essentially, macros to define and build discrete components leads
    //////////////////////////////////////////
    //
    // Returns the lenght of a text
    //
    #macro TextWidth( Text, Font, Size )
       #local T1 = text { ttf Font concat("|",Text,"|") 1 0 scale <Size, Size, 1> }
       #local T2 = text { ttf Font "||" 1 0 scale <Size, Size, 1> }
       
       ((max_extent(T1).x - min_extent(T1).x) - (max_extent(T2).x - min_extent(T2).x))
    #end
    
    
    //////////////////////////////////////////
    //
    // Some textures for components' leads
    //
    #local DiscLead_Silver = texture{e3d_tex_silver};
    #local DiscLead_Gold   = texture{e3d_tex_gold};
    
    //////////////////////////////////////////
    // Resistor/Diode/Condensator leads
    //////////////////////////////////////////
    //
    // Axial leads for horizontal component
    //
    // Entraxe : distance between the two pass-thru holes
    // Height  : distance from PCB to horizontal axle of the lead 
    // LeadDiam: lead diameter
    // LeadTxtr: lead texture
    //
    #macro DiscreteAxialLeadHoriz (Entraxe, Height, LeadDiam, LeadTxtr)
       #local LeadRadius = LeadDiam/2;
       #local BendRadius = LeadDiam;
       #local BoxSize    = 2*LeadDiam+1;
       #local HorizLeadHLen = (Entraxe-LeadDiam)/2;
       #if (Entraxe > 1.0)
       #if (LeadDiam < 1.0)
       #local BendRadius=1.0;
       #end
       #end
       #if (HorizLeadHLen < 0)
       #local HorizLeadHLen= 0;
       #local BendRadius = Entraxe/2;
       #end
                         
       union {
          cylinder {<0,-2,0>, <0,Height-BendRadius,0>, LeadRadius translate -(HorizLeadHLen+BendRadius)*x }
          difference {
             torus {BendRadius LeadRadius}
             box {<-BoxSize,-BoxSize,-BoxSize> <0,BoxSize,BoxSize>}
             box {<-BoxSize,-BoxSize,-BoxSize> <BoxSize,BoxSize,0>}
             rotate <-90,0,0> translate <HorizLeadHLen,Height-BendRadius,0> }
          #if (HorizLeadHLen>0)
             cylinder { <-HorizLeadHLen,Height,0>, <HorizLeadHLen,Height,0>, LeadRadius }
          #end
          difference {
             torus {BendRadius LeadRadius}
             box {<-BoxSize,-BoxSize,-BoxSize> <0,BoxSize,BoxSize>}
             box {<-BoxSize,-BoxSize,-BoxSize> <BoxSize,BoxSize,0>}
             rotate <-90,180,0> translate <-HorizLeadHLen,Height-BendRadius,0> }
          cylinder {<0,-2,0>, <0,Height-BendRadius,0>, LeadRadius translate (HorizLeadHLen+BendRadius)*x }
          texture {LeadTxtr} 
       }
    #end
    
    //////////////////////////////////////////
    //
    // Axial leads vertical component
    //
    // Entraxe : distance between the two pass-thru holes
    // Height  : distance from PCB to horizontal axle of the lead 
    // LeadDiam: lead diameter
    // LeadTxtr: lead texture
    //
    #macro DiscreteAxialLeadVerti (Entraxe, Height, LeadDiam, LeadTxtr)
       #local LeadRadius = LeadDiam/2;
       #local BendRadius = LeadDiam;
       #local BoxSize    = 2*LeadDiam+1;
       #if (BendRadius <= 1.28)
       #local BendRadius = ((Entraxe/2) < 1.28 ? Entraxe/2 : 1.28);
       #end
       #local HorizLeadLen = (Entraxe-2*BendRadius);
       #local HorizLeadHei = (Height/*+BendRadius*/);
       
       union {
          cylinder {<0,-2,0>, <0,HorizLeadHei,0>, LeadRadius }
          difference {
             torus {BendRadius LeadRadius}
             box {<-BoxSize,-BoxSize,-BoxSize> <0,BoxSize,BoxSize>}
             box {<-BoxSize,-BoxSize,-BoxSize> <BoxSize,BoxSize,0>}
             rotate <-90,180,0> translate <BendRadius,HorizLeadHei,0> }
          #if (HorizLeadLen>0)
             cylinder { <0,HorizLeadHei,0>, <HorizLeadLen,HorizLeadHei,0>, LeadRadius translate <BendRadius,BendRadius,0> }
          #end   
          difference {
             torus {BendRadius LeadRadius}
             box {<-BoxSize,-BoxSize,-BoxSize> <0,BoxSize,BoxSize>}
             box {<-BoxSize,-BoxSize,-BoxSize> <BoxSize,BoxSize,0>}
             rotate <-90,0,0> translate <HorizLeadLen+BendRadius,HorizLeadHei,0> }
          cylinder {<0,-2,0>, <0,HorizLeadHei,0>, LeadRadius translate Entraxe*x }
          texture {LeadTxtr} 
       }
    #end
    
    //////////////////////////////////////////
    //
    // Strap
    //
    // Entraxe : distance between the two pass-thru holes
    // LeadDiam: lead diameter
    // LeadTxtr: lead texture
    //
    #macro DiscreteStrap (Entraxe, LeadDiam, LeadTxtr)
       DiscreteAxialLeadVerti (Entraxe, 0.1, LeadDiam, LeadTxtr)
    #end
    
    //////////////////////////////////////////
    //
    // Radial leads for horizontal component (bended leads)
    //
    // Entraxe : distance between the two pass-thru holes
    // Height  : distance from PCB to horizontal part of the leads
    // Depth   : length of the horizontal section of the leads
    // LeadDiam: lead diameter
    // LeadTxtr: lead texture
    //
    #macro DiscreteRadialLeadHoriz (Entraxe, Height, Depth, LeadDiam, LeadTxtr)
       #local LeadRadius = LeadDiam/2;
       #local BendRadius = LeadDiam;
       #local BoxSize    = 2*LeadDiam+1;
       
       union {
          cylinder {<-(Entraxe/2),-2,0>, <-(Entraxe/2),Height-BendRadius,0>, LeadRadius }
          cylinder {<+(Entraxe/2),-2,0>, <+(Entraxe/2),Height-BendRadius,0>, LeadRadius }
          difference {
             torus {BendRadius LeadRadius}
             box {<-BoxSize,-BoxSize,-BoxSize> <0,BoxSize,BoxSize>}
             box {<-BoxSize,-BoxSize,-BoxSize> <BoxSize,BoxSize,0>}
             rotate <-90,90,0> translate <-Entraxe/2, Height-BendRadius,BendRadius> }
          difference {
             torus {BendRadius LeadRadius}
             box {<-BoxSize,-BoxSize,-BoxSize> <0,BoxSize,BoxSize>}
             box {<-BoxSize,-BoxSize,-BoxSize> <BoxSize,BoxSize,0>}
             rotate <-90,90,0> translate <+Entraxe/2, Height-BendRadius,BendRadius> }
          cylinder {<-(Entraxe/2),Height,BendRadius>, <-(Entraxe/2),Height,BendRadius+Depth>, LeadRadius }
          cylinder {<+(Entraxe/2),Height,BendRadius>, <+(Entraxe/2),Height,BendRadius+Depth>, LeadRadius }
          texture {LeadTxtr} 
       }
    #end
    
    
    //////////////////////////////////////////
    //
    // Axial leads vertical component
    //
    // Entraxe : distance between the two pass-thru holes
    // Height  : distance from PCB to top of the leads
    // LeadDiam: lead diameter
    // LeadTxtr: lead texture
    //
    #macro DiscreteRadialLeadVerti (Entraxe, Height, LeadDiam, LeadTxtr)
       #local LeadRadius = LeadDiam/2;
       
       union {
          cylinder {<-(Entraxe/2),-2,0>, <-(Entraxe/2),Height,0>, LeadRadius }
          cylinder {<+(Entraxe/2),-2,0>, <+(Entraxe/2),Height,0>, LeadRadius }
          texture {LeadTxtr} 
       }
    #end


    // Heatsink
    #macro MWHeatSink ()
    object {
       difference {
          box { <-9.8,0,0> <9.8,1.5,17.5> }
          cylinder { <0,-1,14.7> <0,2,14.7> 3.75/2 }
          
          box { <0,-1,0> <2,2,4> rotate -45*y translate <9.8,0,15> } 
          box { <7.8,-1,-1> <10.8,2,2> } 
          cylinder { <5,-1,10> <5,2,10> 0.8 }
          box { <10, -1, 9.2> <5,2,10.8> }
          box { <8.5,-1,9.5> <11,2,7> }
          box { <8.8,-1,0> <10,2,10> }
          
          box { <0,-1,0> <-2,2,4> rotate 45*y translate <-9.8,0,15> }
          box { <-7.8,-1,-1> <-10.8,2,2> } 
          cylinder { <-5,-1,10> <-5,2,10> 0.8 }
          box { <-10, -1, 9.2> <-5,2,10.8> }
          box { <-8.5,-1,9.5> <-11,2,7> }
          box { <-8.8,-1,0> <-10,2,10> }
          
          box { <-0.5,-1,0> <0.5,2,2> }
          box { <-10,-1,-1> <10,2,1> }
          }
       texture{e3d_tex_heatsink_silver}
    }
    #end
    
    // Plastic package with value engraved
    #macro MWPlastic(value)
    object {
       difference {
          box { <-9.8,0,0> <9.8,5,10.7> }
          
          box { <-10,0,-2> <10,6,0> rotate 7*x translate <0,1.5,0>}
          box { <0,0,0> <3,6,11> rotate 7*z translate <9.8,1.5,0> }
          cone { <9.8,5.01,5> 1.5 <9.8,1.4,5> 1.3 }
          cylinder { <6,4.9,5> <6,5.5,5> 1 }
          
          box { <-10,0,0> <10,6,2> rotate -7*x translate <0,1.5,10.7>}
          box { <0,0,0> <-2,6,11> rotate -7*z translate <-9.8,1.5,0> }
          cone { <-9.8,5.01,5> 1.5 <-9.8,1.4,5> 1.3 }
          cylinder { <-6,4.9,5> <-6,5.5,5> 1 }
          
          #local Twidth = TextWidth( value, besch_font, 2 );
          text { ttf besch_font value 1, 0 scale <2,2,1> rotate 90*x translate <-Twidth/2,5.95,6> texture{e3d_tex_ic_marking_bright}}          
       }
       texture{e3d_tex_ic_body_2}
    }
    #end
    
    // Body = Heatsink + Plastic Box
    #macro MWBody (value)
    union {
       object { MWHeatSink () translate -0.001*y }
       object { MWPlastic (value) }
       translate -1.5*y
    }
    #end
    
    // Bend of a pin
    #macro MWBend(BWidth, BRadius, BSlope)
    object {
       difference {
          cylinder { -BWidth/2*x BWidth/2*x BRadius }
          cylinder { -BWidth*x   BWidth*x   BRadius/2 }
          box { <-BWidth,-2*BRadius,0>,          <BWidth, 2*BRadius,2*BRadius> }
          box { <-BWidth,         0,-2*BRadius>, <BWidth,-2*BRadius,2*BRadius> rotate BSlope*x }
          }
       }
    #end
                     
    // Pins for MW15 H
    #macro MWPinH(NpinF, NpinB)
    #local B = 2.5;
    #local D = 4;
    #local E = 0.52;
    #local F = 0.72;
    #local G = 1.27;
    #local R = 2*E;
    #local L2 = 2.54;
    #local L5 = 5.28;
    #local L6 = 2.38;
    #local Ls = 3.592;
    #local IFx = 1.498;
    #local IFy = 2.862;
    
    union {
    
    #local iF = 0;
       union {
    #while (iF < NpinF)
          union {
             box { <-F/2, -L5, -E/2>, <F/2, 1.04, E/2> }
             box { <-F/2, -E/2, 0>, <F/2, E/2, D> translate <0, 4.36, 3.32> }
             union {
                box { <-F/2, -E/2, -Ls/2>, <F/2, E/2, Ls/2>  }
                object { MWBend(F, R, 45) translate <0, -R+E/2, -Ls/2> }
                object { MWBend(F, R, 45) translate <0, -R+E/2, -Ls/2> rotate 180*y }
                rotate -45*x translate <0, IFy, IFx>
                }
             translate iF*2*G*x
             }
    #local iF = iF + 1;
    #end
          translate -(NpinF-1)*G*x
          }
       
    #local iB = 0;
       union {
    #while (iB < NpinB)
          union {
             box { <-F/2, -(L6+B), -E/2>, <F/2, 0, E/2> }
             object { MWBend(F, R, 0) translate (R-E/2)*z }
             box { <-F/2, -E/2, 0>, <F/2, E/2, D> translate <0, R-E/2, R-E/2> }
             translate <iB*2*G, 4.36-(R-E/2), L2>
             }
    #local iB = iB + 1;
    #end
          translate -(NpinB-1)*G*x
          }
    
          
       translate -1.27*z
       texture{e3d_tex_silver}
       }
    #end
    
    // Pins for MW15 V
    #macro MWPinV(NpinF,NpinB)
    #local B  = 2.5;
    #local M1 = 5.08;
    #local M  = 4.55;
    #local G  = 1.27;
    #local E  = 0.52;
    #local R  = 2*E;
    #local F  = 0.72;
    #local L8 = 3.4;
    
    #local AlphaDF = 18.307;
    #local Len4F = 6.109;
    #local IFx = 0.895;
    #local IFy = 1.700;
    #local AlphaDB = 58.886;
    #local Len4B = 3.030;
    #local IBx = 3.435;
    #local IBy = 1.700;
    
    union {
    #local iF = 0;
       union {
    #while (iF < NpinF)
          union {
             box { <-F/2, 0.0, -E/2>, <F/2, 2.0, E/2> translate <0, L8, M1/2+M-(B+E/2)> }
             box { <-F/2, 0.0, -E/2>, <F/2,-5.0, E/2> translate <0,  0, -M1/2> }
             union {
                box { <-F/2, -E/2, -Len4F/2>, <F/2, E/2, Len4F/2>  }
                object { MWBend(F, R, AlphaDF) translate <0, -R+E/2, -Len4F/2> }
                object { MWBend(F, R, AlphaDF) translate <0, -R+E/2, -Len4F/2> rotate 180*x  }
                rotate -AlphaDF*x translate <0, IFy, IFx>
                }
             translate <iF*2*G,0,>
             }
    #local iF = iF + 1;
    #end
          translate -(NpinF-1)*G*x
          }
       
    #local iB = 0;
       union {
    #while (iB < NpinB)
          union {
             box { <-F/2, 0.0, -E/2> <F/2,  2.0, E/2> translate <0, L8, M1/2+M-(B+E/2)> }
             box { <-F/2, 0.0, -E/2> <F/2, -5.5, E/2> translate <0,  0, M1/2> }
             union {
                box { <-F/2, -E/2, -Len4B/2>, <F/2, E/2, Len4B/2>  }
                object { MWBend(F, R, AlphaDB) translate <0, -R+E/2, -Len4B/2> }
                object { MWBend(F, R, AlphaDB) translate <0, -R+E/2, -Len4B/2> rotate 180*x  }
                rotate -AlphaDB*x translate <0, IBy, IBx>
                }
             translate iB*2*G*x
             }
    #local iB = iB + 1;
    #end
          translate -(NpinB-1)*G*x
          }
          
          texture{e3d_tex_silver}
       }
    #end


    #if(H_V=1)
        union { object { MWBody (value) rotate -90*x translate <0,3.5,6> } object { MWPinV(8, 7) } }
    #else
        union { object { MWBody (value)              translate <0,3.5,4.6> } object { MWPinH(8, 7) } }
    #end

#end
